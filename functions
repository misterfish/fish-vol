#BULLET=à¦ˆ 
BULLET=à§ 

_force_colors=

force_colors() {
    _force_colors=yes
}

brackl() {
    #printf "â§¼" # 29fc
    printf "ã€ˆ" # 3008
}

brackr() {
    #printf "â§½" # 29fd
    printf "ã€‰" # 3009
}

color() {
    c=$1
    shift

    doit=yes

    if [ -n "$force_colors" ]; then
        doit=yes
    fi

    # Neither works right in for example printf.
    #if [ ! -t 1 ]; then
    #if perl -e 'exit -t STDOUT'; then
    #    doit=no
    #fi

    if [ "$doit" = 'yes' ]; then
        echo -n [${c}m"${@}"[0m
    else
        echo -n "$@"
    fi
}

G() {
    color 32 "$@"
}
BG() {
    color 92 "$@"
}
Y() {
    color 33 "$@"
}
BY() {
    color 93 "$@"
}
R() {
    color 31 "$@"
}
BR() {
    color 91 "$@"
}
B() {
    color 34 "$@"
}
BB() {
    color 94 "$@"
}
M() {
    color 35 "$@"
}
BM() {
    color 95 "$@"
}
CY() {
    color 36 "$@"
}
BCY() {
    color 96 "$@"
}

doit() {
    echo "$@"
    "$@"
}

cmd() {
    G "$BULLET "
    printf "%s\n" "$(add-quotes "$@")"
    "$@"
}

cmd_eval() {
    G "$BULLET "
    echo "$@"
    eval "$@"
}

#quiet() {
#    eval "$@ >/dev/null 2>&1"
#}

push() {
    name=$1
    eval "$name=(\"\${$name[@]}\" \"$2\")"
}

assert_arg() {
    var=$1
    if [ -z "$var" ]; then
        echo "error assert_arg"
        exit 1
    fi
    eval "val=\$$var"
    if [ -z "$val" ]; then
        if [ -n "$USAGE" ]; then
            echo $USAGE
        fi
        exit 1
    fi
}

info() {
    BB "$BULLET "
    if [ "$1" = '-n' ]; then
        shift
        echo -n "$@"
    else
        echo "$@"
    fi
}

error() {
    R "$BULLET "
    echo "Error: $@"
    exit 1
}

warn() {
    #BR "$BULLET "
    #echo >&2 "$@"
    printf >&2 "%s %s\n" `BR "$BULLET"` "$@"
}

errorf() {
    local e
    local one="$1"
    shift
    printf -v e "$one" "$@"
    error "$e"
}

warnf() {
    local e
    local one="$1"
    shift
    printf -v e "$one" "$@"
    warn "$e"
}

press_enter() {
    perl -e "print 'Press enter to continue. '; <STDIN>"
}

waitfor() {
    local proc
    for proc in "$@"; do
        while ! quiet ps -C "$proc"; do
            printf "Still waiting for %s\n" $(Y "$proc")
            sleep 1
        done
    done
}

