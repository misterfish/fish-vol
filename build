#!/usr/bin/env perl

use 5.18.0;

our $script_dir;
our $libmain_dir;
our $libextra_dir;
our $libfish_dir;

BEGIN {
    use File::Basename;
    $script_dir = dirname $0;
    $libmain_dir = $script_dir . '/libmain';
    $libextra_dir = $script_dir . '/libextra';
    $libfish_dir = $libextra_dir . '/fish-lib-perl';
    # Make sure our subtree versions come before any globally installed
    # versions, or submodule updates won't work right.
    unshift @INC, $_ for $libmain_dir, $libfish_dir; 
    $0 = basename $0;
}

use utf8;

# For install.
use Config;

use Fish::Opt 'opt';
use Fish::Utility;
use Fish::Utility_l qw, chd list contains ,;
use Fish::Class 'o';
Fish::Utility->verbose_cmds(1);

# like natatime from List::MoreUtils
sub chunk;
sub get_default_dir;

my $DEFAULT_CONF_DIR = $ENV{HOME} . '/.local/share/fish-vol';
my $FASOUND_H = $libextra_dir . '/fish-lib-asound/fish-asound.h';
my @FASOUND_CONSTANTS = qw,
    FASOUND_OPTIONS_QUIET
,;

# From man perlport, with additions. Not ideal.
my @ARCH_NAMES_UNIX = qw, 
    aix alpha arm armv5tel BePC CRAY darwin freebsd
    i386 i586 i86pc irix next OPENSTEP
    PA-RISC1.1 ppc-linux RM400 sun4 t3e x86
,;

my $USAGE = get_usage();

my $opt = opt {
    h   => 'f',
    c   => 'f',
    d   => 's',
    p   => 's',
} or error $USAGE;

info($USAGE), exit if $opt->h;

my $g = o(
    mode => shift // '',
    modes => o(
        init => o(),
        build => o(
            clean => $opt->c // 0,
        ),
        gitpull => o(),
        installconf => o(
            dir => $opt->d // $DEFAULT_CONF_DIR,
        ),
        install => o(
            prefix => $opt->p // undef,
            lib => undef,
            arch => undef,
            bin => undef,
        ),
    ),
);

error $USAGE if @ARGV;

my @MODES = qw,
    init build gitpull
    installconf install
,;

my $home = $ENV{HOME} or error "Need to set env variable HOME";
my $pwd = sys_chomp 'pwd';

chd $script_dir;

my $cmds = o(
    init => [],
    build => [],
    gitpull => [],
    installconf => [],
    install => [],
);

# - - -

$cmds->init([
    # These first two commands have to be executed manually by the user, or
    # else this script won't run. Ok if they're here, too.
    shell   => 'git submodule init',
    shell   => 'git submodule update --recursive',
    perl    => qq, chd 'libextra/fish-lib-asound' ,,
    shell   => 'git submodule init',
    perl    => qq, chd '../..',,
    shell   => 'git submodule update --recursive',
]);

$cmds->build([
    perl => qq, chd 'libextra/fish-lib-asound' , ,
    shell => sub { $g->modes->build->clean ? 'make clean' : '' },
    shell => 'make',
    perl => qq, chd "$pwd" , ,

    perl => qq, chd 'libextra/fish-lib-util/fish-util' , ,
    shell => sub { $g->modes->build->clean ? 'make clean' : '' },
    shell => 'make',
    perl => qq, chd "$pwd" , ,

    perl => qq, chd 'libmain/fish_vol_xs' , ,
    shell => 'perl Makefile.PL',
    shell => sub { $g->modes->build->clean ? 'make clean' : '' },
    shell => 'perl Makefile.PL', # make clean also deletes Makefile :)
    shell => 'make',
    perl => qq, chd "$pwd" ,,

    perl => sub { generate_fasound_constants(\@FASOUND_CONSTANTS, $FASOUND_H, "Fish::Vol::ConstantsFasound", "$libmain_dir/Fish/Vol/ConstantsFasound.pm"); 0 }

]);

$cmds->gitpull([
    shell => 'git pull',
    shell   => 'git submodule update --recursive',
]);

$cmds->installconf([
    shell => sprintf(qq, mkdir -p %s ,, shell_quote $g->modes->installconf->dir),
    shell => sprintf(qq, cp conf %s/conf ,, shell_quote $g->modes->installconf->dir),
]);

my $install = $g->modes->install;
$cmds->install([
    perl    => sub { install(); 0 }, # populates $g->install
    shell   => sub { sprintf(qq, mkdir -p %s ,, shell_quote $install->arch) },
    shell   => sub { sprintf(qq, mkdir -p %s ,, shell_quote $install->lib) },
    shell   => sub { sprintf(qq, mkdir -p %s/Fish ,, shell_quote $install->lib) },
    shell   => sub { sprintf(qq, mkdir -p %s ,, shell_quote $install->bin) },
    shell   => sub { sprintf qq, cp 'libmain/fish_vol_xs/lib/fish_vol_xs.pm' %s ,, shell_quote $install->lib },
    shell   => sub { sprintf qq, cp 'libmain/fish_vol_xs/blib/arch/auto/fish_vol_xs/fish_vol_xs.so' %s ,, shell_quote $install->arch },
    shell   => sub { mkdir qq, %s/Fish ,, shell_quote $install->lib },
    shell   => sub { sprintf qq, cp -ar 'libmain/Fish/Vol' %s/Fish ,, shell_quote $install->lib },
    shell    => sub { sprintf qq, cp -ar 'libextra/fish-lib-perl/Fish/'* %s/Fish ,, shell_quote $install->lib },
    shell    => sub { sprintf qq, cp -ar fish-vol %s ,, shell_quote $install->bin },
]);

# - - - -

my $mode = $g->mode or 
    error $USAGE;

contains @MODES, $mode or 
    error "Invalid mode:", BR $mode;

go($cmds->$mode);

exit;

# - - - - 

sub go {
    my ($cmds) = @_;
    my $n = chunk 2, $cmds;
    while (my @v = $n->()) {
        my ($executor, $what) = @v;
        $what = $what->() if ref $what eq 'CODE';
        $executor eq 'perl' ?
            do_perl($what) :
        $executor eq 'shell' ?
            do_shell($what) :
        ierror "Invalid:", BR $executor;
    }
}

sub do_perl {
    my ($p) = @_;
    return unless strip_s $p;
    info $p;
    eval "$p; 1" or 
        ierror d8 "Error: $@";
}

sub do_shell {
    my ($c) = @_;
    return unless strip_s $c;
    sys_system $c, { die => 1 };
}

# assume well-behaved args.
sub chunk {
    my ($n, $ary) = @_;
    my $i = -1;
    my $length = @$ary;
    sub {
        my @ret;
        for my $j (1 .. $n) {
            $i++;
            if ($i == $length - 1) {
                iwar 'j', $j, 'n', $n unless $j == $n;  #premature end
            }
            if ($i == $length) {
                return; #done
            }
            push @ret, $ary->[$i];
        }

        @ret
    }
}

sub get_usage {
    my $s = "%s\n";
    my $t = " %s Â» %s\n";

    my $u = "Usage: $0 " . Y('<mode> ') . G('[opts]') . "\n\n";
    $u .= sprintf $s, Y 'init'; 
    $u .= sprintf $s, Y 'build'; 
    $u .= sprintf $t, G  '-c', 'make clean';
    $u .= sprintf $s, Y 'installconf'; 
    $u .= sprintf $t, G  '-d', "directory, defaults to " . BR $DEFAULT_CONF_DIR;
    $u .= sprintf $s, Y 'install'; 
    $u .= sprintf $t, G  '-p', "prefix, or else installed by default to " . Y 'installsitearch', ', ', Y  'installsitelib', ' ', Y 'installsitebin';
    $u .= "---\n";
    $u .= sprintf $s, Y 'gitpull'; 

    $u
}

# - - - - 

sub install {

    my $installvendorarch;
    my $installvendorlib;
    my $installvendorbin;

    my $dirarch;
    my $dirlib;
    my $dirbin;

    my $install = $g->modes->install;

    if (my $pref = $install->prefix) {
        $installvendorarch = $Config{installvendorarch} 
            or ierror;

        my $arch;
        # Find the first thing that looks like an arch name. Not ideal, but
        # don't know another way. 
        # uname -a and $^O are no good.
        SPLIT:
        for (split m, / ,x, $installvendorarch) {
            for my $s (@ARCH_NAMES_UNIX) {
                if (m, ^ $s ,x) {
                    $arch = $_;
                    info "Got arch:", Y $arch;
                    last SPLIT;
                }
            }
        }
        ierror "Couldn't determine arch" unless $arch;
        my $version = $Config{version} or 
            ierror "Couldn't determine version";
        $dirarch = "$pref/lib/perl5/$version/$arch";
        $dirlib = "$pref/lib/perl5";
        $dirbin = "$pref/bin";
    }
    else {
        $installvendorarch = $Config{installvendorarch} 
            or ierror;
        $installvendorlib = $Config{installvendorlib}
            or ierror;
        $installvendorbin = $Config{installvendorbin}
            or ierror;
        info Y 'installvendorarch', $installvendorarch;
        info Y 'installvendorlib', $installvendorlib;
        info Y 'installvendorbin', $installvendorbin;
        $dirarch = $installvendorarch;
        $dirlib = $installvendorlib;
        $dirbin = $installvendorbin;
    }

    # XX
    $dirarch .= '/auto/fish_vol_xs';

    info G 'arch dir', $dirarch;
    info G 'lib dir', $dirlib;
    info G 'bin dir', $dirbin;
    $install->bin($dirbin);
    $install->arch($dirarch);
    $install->lib($dirlib);
}

sub generate_fasound_constants {
    my ($which_constants, $h_file, $package, $output) = @_;

    my $f = $h_file;
    my $fh = safeopen $f, { die => 0 } or iwar,
        return;
    my %need = map { $_ => 1 } @$which_constants;

    my $fhw = safeopen ">$output", { die => 0 } or iwar,
        return;
    say $fhw "package $package;"; 

    say $fhw "our %constants = (";
    while (<$fh>) {
        strip_s;
        next unless m, ^ \# define \s+ (?<k> FASOUND_ \S+) \s+ (?<v> \S+) ,x;

        my $k = $+{k};
        my $v = $+{v};
        $v = hex $v if $v =~ / ^ 0x\d+ $ /x;
        #info sprintf 'Setting asound constant %s=%s', $k, $v if DEBUG;
        delete $need{$k};
        my $easy = lc $k =~ s/FASOUND_OPTIONS_//r;
        say $fhw "$easy => $v,";
    }
    say $fhw ");";
    say $fhw "1;";

    if (%need) {
        iwar "Missing fasound constants:", join ', ', map { BR } keys %need;
        return 0;
    }

    1
}

